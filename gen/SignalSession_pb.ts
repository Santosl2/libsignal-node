// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file SignalSession.proto (package libsignal.signal, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file SignalSession.proto.
 */
export const file_SignalSession: GenFile = /*@__PURE__*/
  fileDesc("ChNTaWduYWxTZXNzaW9uLnByb3RvEhBsaWJzaWduYWwuc2lnbmFsIjcKDFByb3RvS2V5UGFpchISCgpwdWJsaWNfa2V5GAEgASgMEhMKC3ByaXZhdGVfa2V5GAIgASgMIqABChNQcm90b0N1cnJlbnRSYXRjaGV0EjoKEmVwaGVtZXJhbF9rZXlfcGFpchgBIAEoCzIeLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9LZXlQYWlyEiEKGWxhc3RfcmVtb3RlX2VwaGVtZXJhbF9rZXkYAiABKAwSGAoQcHJldmlvdXNfY291bnRlchgDIAEoDRIQCghyb290X2tleRgEIAEoDCKpAQoOUHJvdG9JbmRleEluZm8SEAoIYmFzZV9rZXkYASABKAwSOQoNYmFzZV9rZXlfdHlwZRgCIAEoDjIiLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9CYXNlS2V5VHlwZRIOCgZjbG9zZWQYAyABKBISDAoEdXNlZBgEIAEoEhIPCgdjcmVhdGVkGAUgASgSEhsKE3JlbW90ZV9pZGVudGl0eV9rZXkYBiABKAwiZQoSUHJvdG9QZW5kaW5nUHJlS2V5EhUKDXNpZ25lZF9rZXlfaWQYASABKA0SEAoIYmFzZV9rZXkYAiABKAwSFwoKcHJlX2tleV9pZBgDIAEoDUgAiAEBQg0KC19wcmVfa2V5X2lkIjoKDVByb3RvQ2hhaW5LZXkSDwoHY291bnRlchgBIAEoERIQCgNrZXkYAiABKAxIAIgBAUIGCgRfa2V5Iu8BCgpQcm90b0NoYWluEjIKCWNoYWluX2tleRgBIAEoCzIfLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9DaGFpbktleRI0CgpjaGFpbl90eXBlGAIgASgOMiAubGlic2lnbmFsLnNpZ25hbC5Qcm90b0NoYWluVHlwZRJDCgxtZXNzYWdlX2tleXMYAyADKAsyLS5saWJzaWduYWwuc2lnbmFsLlByb3RvQ2hhaW4uTWVzc2FnZUtleXNFbnRyeRoyChBNZXNzYWdlS2V5c0VudHJ5EgsKA2tleRgBIAEoERINCgV2YWx1ZRgCIAEoDDoCOAEioQMKEVByb3RvU2Vzc2lvbkVudHJ5EhwKD3JlZ2lzdHJhdGlvbl9pZBgBIAEoDUgAiAEBEj4KD2N1cnJlbnRfcmF0Y2hldBgCIAEoCzIlLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9DdXJyZW50UmF0Y2hldBI0CgppbmRleF9pbmZvGAMgASgLMiAubGlic2lnbmFsLnNpZ25hbC5Qcm90b0luZGV4SW5mbxJCCg9wZW5kaW5nX3ByZV9rZXkYBCABKAsyJC5saWJzaWduYWwuc2lnbmFsLlByb3RvUGVuZGluZ1ByZUtleUgBiAEBEj8KBmNoYWlucxgFIAMoCzIvLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9TZXNzaW9uRW50cnkuQ2hhaW5zRW50cnkaSwoLQ2hhaW5zRW50cnkSCwoDa2V5GAEgASgJEisKBXZhbHVlGAIgASgLMhwubGlic2lnbmFsLnNpZ25hbC5Qcm90b0NoYWluOgI4AUISChBfcmVnaXN0cmF0aW9uX2lkQhIKEF9wZW5kaW5nX3ByZV9rZXkiwQEKElByb3RvU2Vzc2lvblJlY29yZBJECghzZXNzaW9ucxgBIAMoCzIyLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9TZXNzaW9uUmVjb3JkLlNlc3Npb25zRW50cnkSDwoHdmVyc2lvbhgCIAEoCRpUCg1TZXNzaW9uc0VudHJ5EgsKA2tleRgBIAEoCRIyCgV2YWx1ZRgCIAEoCzIjLmxpYnNpZ25hbC5zaWduYWwuUHJvdG9TZXNzaW9uRW50cnk6AjgBKnUKEFByb3RvQmFzZUtleVR5cGUSIwofUFJPVE9fQkFTRV9LRVlfVFlQRV9VTlNQRUNJRklFRBAAEhwKGFBST1RPX0JBU0VfS0VZX1RZUEVfT1VSUxABEh4KGlBST1RPX0JBU0VfS0VZX1RZUEVfVEhFSVJTEAIqcAoOUHJvdG9DaGFpblR5cGUSIAocUFJPVE9fQ0hBSU5fVFlQRV9VTlNQRUNJRklFRBAAEhwKGFBST1RPX0NIQUlOX1RZUEVfU0VORElORxABEh4KGlBST1RPX0NIQUlOX1RZUEVfUkVDRUlWSU5HEAJiBnByb3RvMw");

/**
 * Represents KeyPair from utils/src/types.ts
 *
 * @generated from message libsignal.signal.ProtoKeyPair
 */
export type ProtoKeyPair = Message<"libsignal.signal.ProtoKeyPair"> & {
  /**
   * @generated from field: bytes public_key = 1;
   */
  publicKey: Uint8Array;

  /**
   * @generated from field: bytes private_key = 2;
   */
  privateKey: Uint8Array;
};

/**
 * Describes the message libsignal.signal.ProtoKeyPair.
 * Use `create(ProtoKeyPairSchema)` to create a new message.
 */
export const ProtoKeyPairSchema: GenMessage<ProtoKeyPair> = /*@__PURE__*/
  messageDesc(file_SignalSession, 0);

/**
 * Represents CurrentRatchet within SessionEntry
 *
 * @generated from message libsignal.signal.ProtoCurrentRatchet
 */
export type ProtoCurrentRatchet = Message<"libsignal.signal.ProtoCurrentRatchet"> & {
  /**
   * @generated from field: libsignal.signal.ProtoKeyPair ephemeral_key_pair = 1;
   */
  ephemeralKeyPair?: ProtoKeyPair;

  /**
   * @generated from field: bytes last_remote_ephemeral_key = 2;
   */
  lastRemoteEphemeralKey: Uint8Array;

  /**
   * @generated from field: uint32 previous_counter = 3;
   */
  previousCounter: number;

  /**
   * @generated from field: bytes root_key = 4;
   */
  rootKey: Uint8Array;
};

/**
 * Describes the message libsignal.signal.ProtoCurrentRatchet.
 * Use `create(ProtoCurrentRatchetSchema)` to create a new message.
 */
export const ProtoCurrentRatchetSchema: GenMessage<ProtoCurrentRatchet> = /*@__PURE__*/
  messageDesc(file_SignalSession, 1);

/**
 * Represents IndexInfo within SessionEntry
 *
 * @generated from message libsignal.signal.ProtoIndexInfo
 */
export type ProtoIndexInfo = Message<"libsignal.signal.ProtoIndexInfo"> & {
  /**
   * @generated from field: bytes base_key = 1;
   */
  baseKey: Uint8Array;

  /**
   * @generated from field: libsignal.signal.ProtoBaseKeyType base_key_type = 2;
   */
  baseKeyType: ProtoBaseKeyType;

  /**
   * Using sint64 for potential -1 value and timestamps
   *
   * @generated from field: sint64 closed = 3;
   */
  closed: bigint;

  /**
   * Using sint64 for timestamps
   *
   * @generated from field: sint64 used = 4;
   */
  used: bigint;

  /**
   * Using sint64 for timestamps
   *
   * @generated from field: sint64 created = 5;
   */
  created: bigint;

  /**
   * @generated from field: bytes remote_identity_key = 6;
   */
  remoteIdentityKey: Uint8Array;
};

/**
 * Describes the message libsignal.signal.ProtoIndexInfo.
 * Use `create(ProtoIndexInfoSchema)` to create a new message.
 */
export const ProtoIndexInfoSchema: GenMessage<ProtoIndexInfo> = /*@__PURE__*/
  messageDesc(file_SignalSession, 2);

/**
 * Represents PendingPreKey within SessionEntry
 *
 * @generated from message libsignal.signal.ProtoPendingPreKey
 */
export type ProtoPendingPreKey = Message<"libsignal.signal.ProtoPendingPreKey"> & {
  /**
   * @generated from field: uint32 signed_key_id = 1;
   */
  signedKeyId: number;

  /**
   * @generated from field: bytes base_key = 2;
   */
  baseKey: Uint8Array;

  /**
   * Note: The dynamic [key: string]: unknown part from the original
   *       is omitted as it doesn't map well to Protobuf directly.
   *       If needed, a map<string, google.protobuf.Value> could be used,
   *       but adds complexity. Assumed not essential for core function here.
   *
   * @generated from field: optional uint32 pre_key_id = 3;
   */
  preKeyId?: number;
};

/**
 * Describes the message libsignal.signal.ProtoPendingPreKey.
 * Use `create(ProtoPendingPreKeySchema)` to create a new message.
 */
export const ProtoPendingPreKeySchema: GenMessage<ProtoPendingPreKey> = /*@__PURE__*/
  messageDesc(file_SignalSession, 3);

/**
 * Represents ChainKey within Chain
 *
 * @generated from message libsignal.signal.ProtoChainKey
 */
export type ProtoChainKey = Message<"libsignal.signal.ProtoChainKey"> & {
  /**
   * Can be -1
   *
   * @generated from field: sint32 counter = 1;
   */
  counter: number;

  /**
   * Represents nullable key
   *
   * @generated from field: optional bytes key = 2;
   */
  key?: Uint8Array;
};

/**
 * Describes the message libsignal.signal.ProtoChainKey.
 * Use `create(ProtoChainKeySchema)` to create a new message.
 */
export const ProtoChainKeySchema: GenMessage<ProtoChainKey> = /*@__PURE__*/
  messageDesc(file_SignalSession, 4);

/**
 * Represents Chain within SessionEntry._chains map value
 *
 * @generated from message libsignal.signal.ProtoChain
 */
export type ProtoChain = Message<"libsignal.signal.ProtoChain"> & {
  /**
   * @generated from field: libsignal.signal.ProtoChainKey chain_key = 1;
   */
  chainKey?: ProtoChainKey;

  /**
   * @generated from field: libsignal.signal.ProtoChainType chain_type = 2;
   */
  chainType: ProtoChainType;

  /**
   * Key is message number (counter)
   *
   * @generated from field: map<sint32, bytes> message_keys = 3;
   */
  messageKeys: { [key: number]: Uint8Array };
};

/**
 * Describes the message libsignal.signal.ProtoChain.
 * Use `create(ProtoChainSchema)` to create a new message.
 */
export const ProtoChainSchema: GenMessage<ProtoChain> = /*@__PURE__*/
  messageDesc(file_SignalSession, 5);

/**
 * Represents SessionEntry class
 *
 * @generated from message libsignal.signal.ProtoSessionEntry
 */
export type ProtoSessionEntry = Message<"libsignal.signal.ProtoSessionEntry"> & {
  /**
   * @generated from field: optional uint32 registration_id = 1;
   */
  registrationId?: number;

  /**
   * @generated from field: libsignal.signal.ProtoCurrentRatchet current_ratchet = 2;
   */
  currentRatchet?: ProtoCurrentRatchet;

  /**
   * @generated from field: libsignal.signal.ProtoIndexInfo index_info = 3;
   */
  indexInfo?: ProtoIndexInfo;

  /**
   * @generated from field: optional libsignal.signal.ProtoPendingPreKey pending_pre_key = 4;
   */
  pendingPreKey?: ProtoPendingPreKey;

  /**
   * Key is ephemeral public key bytes
   *
   * @generated from field: map<string, libsignal.signal.ProtoChain> chains = 5;
   */
  chains: { [key: string]: ProtoChain };
};

/**
 * Describes the message libsignal.signal.ProtoSessionEntry.
 * Use `create(ProtoSessionEntrySchema)` to create a new message.
 */
export const ProtoSessionEntrySchema: GenMessage<ProtoSessionEntry> = /*@__PURE__*/
  messageDesc(file_SignalSession, 6);

/**
 * Represents SessionRecord class
 *
 * @generated from message libsignal.signal.ProtoSessionRecord
 */
export type ProtoSessionRecord = Message<"libsignal.signal.ProtoSessionRecord"> & {
  /**
   * Key is base key bytes
   *
   * @generated from field: map<string, libsignal.signal.ProtoSessionEntry> sessions = 1;
   */
  sessions: { [key: string]: ProtoSessionEntry };

  /**
   * Keep for potential future protobuf-level migrations
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message libsignal.signal.ProtoSessionRecord.
 * Use `create(ProtoSessionRecordSchema)` to create a new message.
 */
export const ProtoSessionRecordSchema: GenMessage<ProtoSessionRecord> = /*@__PURE__*/
  messageDesc(file_SignalSession, 7);

/**
 * Corresponds to BaseKeyType enum in base_key_type.ts
 *
 * @generated from enum libsignal.signal.ProtoBaseKeyType
 */
export enum ProtoBaseKeyType {
  /**
   * @generated from enum value: PROTO_BASE_KEY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROTO_BASE_KEY_TYPE_OURS = 1;
   */
  OURS = 1,

  /**
   * @generated from enum value: PROTO_BASE_KEY_TYPE_THEIRS = 2;
   */
  THEIRS = 2,
}

/**
 * Describes the enum libsignal.signal.ProtoBaseKeyType.
 */
export const ProtoBaseKeyTypeSchema: GenEnum<ProtoBaseKeyType> = /*@__PURE__*/
  enumDesc(file_SignalSession, 0);

/**
 * Corresponds to ChainType enum in chain_type.ts
 *
 * @generated from enum libsignal.signal.ProtoChainType
 */
export enum ProtoChainType {
  /**
   * @generated from enum value: PROTO_CHAIN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROTO_CHAIN_TYPE_SENDING = 1;
   */
  SENDING = 1,

  /**
   * @generated from enum value: PROTO_CHAIN_TYPE_RECEIVING = 2;
   */
  RECEIVING = 2,
}

/**
 * Describes the enum libsignal.signal.ProtoChainType.
 */
export const ProtoChainTypeSchema: GenEnum<ProtoChainType> = /*@__PURE__*/
  enumDesc(file_SignalSession, 1);

